from pathlib import Path
from typing import List

import pandas as pd

from nptdms import TdmsFile


class ModaqTdmsExtractor:
    """
    Convert a single tdms file generated by MODAQ into commonly used filed formats. Make every attempt to keep the data of the original tdms file
    """

    available_output_filetypes: List[str] = ["parquet", "csv"]

    def __init__(
        self, output_filetypes=available_output_filetypes, output_file_prefix=""
    ):
        self.output_filetypes: List[str] = output_filetypes
        self.output_file_prefix = output_file_prefix

    def save_tdms_file_to_dataframe(
        self,
        input_tdms_file: TdmsFile,
        tdms_name: str,
        output_complete_folder_path: str,
        df_output_type: str,
    ) -> List[str]:
        if len(self.output_filetypes) > 1:
            output_complete_folder: Path = Path(
                output_complete_folder_path, df_output_type
            )
        else:
            output_complete_folder: Path = Path(output_complete_folder_path)

        output_complete_folder.mkdir(exist_ok=True)
        num_groups = len(input_tdms_file.groups())

        results = []
        for group in input_tdms_file.groups():
            group_name: str = group.name
            this_df: pd.DataFrame = group.as_dataframe()

            output_group_path = Path(
                output_complete_folder,
                group_name,
            )
            output_group_path.mkdir(exist_ok=True)

            # Postfix the group name if there is more than one group
            output_file_group = ""
            if num_groups > 1:
                output_file_group = f"_{group_name}"

            output_group_file = str(
                Path(
                    output_group_path,
                    f"{self.output_file_prefix}{tdms_name}{output_file_group}.{df_output_type}",
                )
            )

            if df_output_type == "parquet":
                this_df.to_parquet(output_group_file)
            if df_output_type == "csv":
                this_df.to_csv(output_group_file)
            results.append(output_group_file)

        return results

    def save_tdms_file_to_parquet(
        self,
        input_tdms_file: TdmsFile,
        tdms_name: str,
        output_complete_folder_path: str,
    ) -> List[str]:
        return self.save_tdms_file_to_dataframe(
            input_tdms_file, tdms_name, output_complete_folder_path, "parquet"
        )

    def save_tdms_file_to_csv(
        self,
        input_tdms_file: TdmsFile,
        tdms_name: str,
        output_complete_folder_path: str,
    ) -> List[str]:
        return self.save_tdms_file_to_dataframe(
            input_tdms_file, tdms_name, output_complete_folder_path, "csv"
        )

    # Output:
    # One parquet file per group
    # One csv file per group
    def extract(self, input_tdms_file_path: str, output_folder_path: str):
        # Request the entire path to the input and output dirs
        input_complete_tdms_file_path: str = str(Path(input_tdms_file_path).absolute())
        output_complete_folder_path: str = str(Path(output_folder_path).absolute())

        results = {}
        with TdmsFile.open(input_complete_tdms_file_path) as this_tdms_file:
            tdms_name: str = str(Path(input_complete_tdms_file_path).name).split(".")[0]
            for filetype in self.output_filetypes:
                Path(output_folder_path).mkdir(exist_ok=True)
                if filetype == "parquet":
                    results["parquet"] = self.save_tdms_file_to_parquet(
                        this_tdms_file, tdms_name, output_complete_folder_path
                    )
                if filetype == "csv":
                    results["csv"] = self.save_tdms_file_to_csv(
                        this_tdms_file, tdms_name, output_complete_folder_path
                    )

        return results
